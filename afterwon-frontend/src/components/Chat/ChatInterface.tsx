'use client'

import { useState, useRef, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import ChatHeader from './ChatHeader'
import ChatMessages from './ChatMessages'
import ChatInput from './ChatInput'
import DataTable from '../Table/DataTable'
import FileSystem from '../FileSystem/FileSystem'
import ChatSearch from './ChatSearch'
import AppConnector from '../AppConnector/AppConnector'
import Settings from '../Settings/Settings'
import Projects from '../Projects/Projects'
import PlotlyChart from '../Chart/PlotlyChart'
import { apiService } from '@/services/api'
import { useWebSocket } from '@/hooks/useWebSocket'
import { authService } from '@/services/auth'
import { firestoreService, ChatSession } from '@/services/firestore'
import { userService } from '@/services/userService'
import { User } from 'firebase/auth'
import { RiSideBarLine } from 'react-icons/ri'
import Image from 'next/image'
import { useLanguage } from '@/contexts/LanguageContext'

interface Message {
  id: string
  type: 'user' | 'assistant'
  content: string
  timestamp: Date
  isStreaming?: boolean  // Ïä§Ìä∏Î¶¨Î∞ç ÏÉÅÌÉú Ï∂îÏ†Å
  chartData?: any
  insights?: string[]
  followUpQuestions?: string[]
  fileInfo?: {
    filename: string
    fileSize: number
    fileType: 'csv' | 'excel'
    file_id: string
  }
  tableData?: {
    data: any[]
    columns: string[]
    filename: string
  }
  codeExecution?: {
    codeChunks: string[]
    isExecuting: boolean
    result?: string
    output?: string  // Ïã§Ìñâ Í≤∞Í≥º Ï∂úÎ†•
  }
}

export default function ChatInterface() {
  const { t } = useLanguage()
  const [messages, setMessages] = useState<Message[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [uploadedFile, setUploadedFile] = useState<any>(null)
  const [isAutoScrollEnabled, setIsAutoScrollEnabled] = useState(true)
  const [user, setUser] = useState<User | null>(null)
  const [currentSessionId, setCurrentSessionId] = useState<string | null>(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('currentSessionId')
    }
    return null
  })
  const [currentProjectId, setCurrentProjectId] = useState<string | null>(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('currentProjectId')
    }
    return null
  })
  const [isProjectChat, setIsProjectChat] = useState<boolean>(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('isProjectChat') === 'true'
    }
    return false
  })
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('sidebarCollapsed') === 'true'
    }
    return false
  })
  const [chatHistory, setChatHistory] = useState<ChatSession[]>([])
  const [openMenuId, setOpenMenuId] = useState<string | null>(null)
  const [currentPage, setCurrentPage] = useState<'chat' | 'filesystem' | 'chatsearch' | 'appconnector' | 'settings' | 'projects'>('chat')
  const [isProfileMenuOpen, setIsProfileMenuOpen] = useState(false)
  const [expandedChart, setExpandedChart] = useState<{chartData: any, title: string} | null>(null)
  const [panelWidth, setPanelWidth] = useState(50) // Ï∞®Ìä∏ Ìå®ÎÑê ÎÑàÎπÑ (ÌçºÏÑºÌä∏)
  const [inputKey, setInputKey] = useState(Date.now()) // ChatInput Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅÏö©
  const [deleteConfirmModal, setDeleteConfirmModal] = useState<{
    isOpen: boolean
    sessionId: string | null
    sessionTitle: string | null
  }>({
    isOpen: false,
    sessionId: null,
    sessionTitle: null
  })
  const [mounted, setMounted] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const resizerRef = useRef<HTMLDivElement>(null)
  
  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∫êÏã±ÏùÑ ÏúÑÌïú state Ï∂îÍ∞Ä
  const [cachedUserInfo, setCachedUserInfo] = useState<{
    initial: string
    displayName: string
    email: string | null
  } | null>(() => {
    // localStorageÏóêÏÑú Ï∫êÏãúÎêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú
    if (typeof window !== 'undefined') {
      const cached = localStorage.getItem('cachedUserInfo')
      return cached ? JSON.parse(cached) : null
    }
    return null
  })
  const { sendMessage: sendWebSocketMessage, lastMessage, isConnected } = useWebSocket(false)
  const router = useRouter()

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Ï∫êÏã±
  const updateUserCache = (user: User | null) => {
    if (!user) {
      setCachedUserInfo(null)
      if (typeof window !== 'undefined') {
        localStorage.removeItem('cachedUserInfo')
      }
      return
    }

    const userInfo = {
      initial: getUserInitial(user),
      displayName: getUserDisplayName(user),
      email: user.email
    }

    setCachedUserInfo(userInfo)
    if (typeof window !== 'undefined') {
      localStorage.setItem('cachedUserInfo', JSON.stringify(userInfo))
    }
  }

  // ÏÇ¨Ïö©Ïûê Ïù¥ÎãàÏÖú Ï∂îÏ∂ú Ìï®Ïàò
  const getUserInitial = (user: User | null): string => {
    if (!user) return '?'
    
    // displayNameÏù¥ ÏûàÏúºÎ©¥ Ï≤´ Í∏ÄÏûê ÏÇ¨Ïö©
    if (user.displayName) {
      return user.displayName.charAt(0).toUpperCase()
    }
    
    // emailÏóêÏÑú @ Ïïû Ï≤´ Í∏ÄÏûê ÏÇ¨Ïö©
    if (user.email) {
      return user.email.charAt(0).toUpperCase()
    }
    
    return '?'
  }

  // ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ Ï∂îÏ∂ú Ìï®Ïàò (Í∞úÏÑ†)
  const getUserDisplayName = (user: User | null): string => {
    if (!user) return 'ÏÇ¨Ïö©Ïûê'
    
    // displayNameÏù¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö©
    if (user.displayName) {
      return user.displayName
    }
    
    // Google Î°úÍ∑∏Ïù∏Ïùò Í≤ΩÏö∞ emailÏóêÏÑú Ïù¥Î¶Ñ Î∂ÄÎ∂Ñ Ï∂îÏ∂ú ÏãúÎèÑ
    if (user.email) {
      const emailPrefix = user.email.split('@')[0]
      
      // GmailÏùò Í≤ΩÏö∞ Ï†ê(.)ÏùÑ Í≥µÎ∞±ÏúºÎ°ú Î≥ÄÌôòÌïòÏó¨ Ïù¥Î¶ÑÏ≤òÎüº ÌëúÏãú
      if (user.email.includes('@gmail.com')) {
        const nameParts = emailPrefix.split('.')
        if (nameParts.length > 1) {
          // Í∞Å Îã®Ïñ¥Ïùò Ï≤´ Í∏ÄÏûêÎ•º ÎåÄÎ¨∏ÏûêÎ°ú Î≥ÄÌôò
          return nameParts
            .map(part => part.charAt(0).toUpperCase() + part.slice(1))
            .join(' ')
        }
      }
      
      // ÏùºÎ∞òÏ†ÅÏù∏ Í≤ΩÏö∞ Ï≤´ Í∏ÄÏûêÎßå ÎåÄÎ¨∏ÏûêÎ°ú
      return emailPrefix.charAt(0).toUpperCase() + emailPrefix.slice(1)
    }
    
    return 'ÏÇ¨Ïö©Ïûê'
  }

  // ÏÉà Ï±ÑÌåÖ ÏãúÏûë Ìï®Ïàò (ÌÖåÏä§Ìä∏Ïö©)
  const startNewChat = () => {
    console.log('üÜï Starting new chat - clearing current session')
    setCurrentSessionId(null)
    updateCurrentSessionId(null)
    setMessages([])
    localStorage.removeItem('currentSessionId')
    console.log('‚úÖ Session cleared, ready for new chat')
  }

  // currentSessionId ÏóÖÎç∞Ïù¥Ìä∏ Ïãú localStorageÏóêÎèÑ Ï†ÄÏû•
  const updateCurrentSessionId = (sessionId: string | null) => {
    setCurrentSessionId(sessionId)
    if (typeof window !== 'undefined') {
      if (sessionId) {
        localStorage.setItem('currentSessionId', sessionId)
      } else {
        localStorage.removeItem('currentSessionId')
      }
    }
  }

  // ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
  const updateProjectContext = (projectId: string | null, isProject: boolean = false) => {
    setCurrentProjectId(projectId)
    setIsProjectChat(isProject)
    if (typeof window !== 'undefined') {
      if (projectId) {
        localStorage.setItem('currentProjectId', projectId)
        localStorage.setItem('isProjectChat', isProject.toString())
      } else {
        localStorage.removeItem('currentProjectId')
        localStorage.removeItem('isProjectChat')
      }
    }
  }

  // ÏÉà Ï±ÑÌåÖ ÏãúÏûë Ïãú ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏ ÌÅ¥Î¶¨Ïñ¥
  const clearProjectContext = () => {
    updateProjectContext(null, false)
  }

  // Hydration Î¨∏Ï†ú Ìï¥Í≤∞ÏùÑ ÏúÑÌïú mounted ÏÉÅÌÉú Í¥ÄÎ¶¨
  useEffect(() => {
    setMounted(true)
  }, [])

  // Î©îÎâ¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠Ïãú Îã´Í∏∞
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      
      // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Î©îÎâ¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ï≤òÎ¶¨
      if (openMenuId !== null) {
        if (!target.closest('[data-menu-container]')) {
          setOpenMenuId(null);
        }
      }
      
      // ÌîÑÎ°úÌïÑ Î©îÎâ¥ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ï≤òÎ¶¨
      if (isProfileMenuOpen) {
        if (!target.closest('[data-profile-menu]')) {
          setIsProfileMenuOpen(false);
        }
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [openMenuId, isProfileMenuOpen]);

  // ESC ÌÇ§Î°ú ÏÇ≠Ï†ú Î™®Îã¨ Îã´Í∏∞
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && deleteConfirmModal.isOpen) {
        handleDeleteChatCancel();
      }
    };

    if (deleteConfirmModal.isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [deleteConfirmModal.isOpen]);

  // currentSessionId Î≥ÄÌôî Ï∂îÏ†Å
  useEffect(() => {
    console.log('üîÑ currentSessionId changed:', {
      previous: 'previous value',
      current: currentSessionId,
      timestamp: new Date().toISOString()
    })
  }, [currentSessionId])

  // ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏ Î≥ÄÌôî Ïãú Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Îã§Ïãú Î°úÎìú
  useEffect(() => {
    if (user) {
      console.log('üîÑ Project context changed:', { currentProjectId, isProjectChat })
      loadChatHistory(user)
    }
  }, [currentProjectId, isProjectChat, user])

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÌôïÏù∏ Î∞è redirect Í≤∞Í≥º Ï≤¥ÌÅ¨
  useEffect(() => {
    // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú redirect Í≤∞Í≥º Î®ºÏ†Ä ÌôïÏù∏
    const checkAuth = async () => {
      try {
        // redirect Í≤∞Í≥º ÌôïÏù∏
        await authService.checkRedirectResult();
      } catch (error) {
        console.warn('Redirect check failed:', error);
      }
    };

    checkAuth();

    const unsubscribe = authService.onAuthStateChanged((user) => {
      if (user) {
        console.log('User authenticated:', user.email)
        setUser(user)
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∫êÏãú ÏóÖÎç∞Ïù¥Ìä∏
        updateUserCache(user)
        // Firestore Ïò§Î•òÏóê Í¥ÄÍ≥ÑÏóÜÏù¥ ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú Ïú†ÏßÄ
        initializeChatSession(user).catch(error => {
          console.warn('‚ö†Ô∏è Chat initialization failed but user remains authenticated:', error)
        })
      } else {
        console.log('User not authenticated, redirecting to home')
        // Î°úÍ∑∏ÏïÑÏõÉ Ïãú ÌòÑÏû¨ ÏÑ∏ÏÖò Ï†ïÎ≥¥ ÌÅ¥Î¶¨Ïñ¥
        updateCurrentSessionId(null)
        updateUserCache(null) // ÏÇ¨Ïö©Ïûê Ï∫êÏãúÎèÑ ÌÅ¥Î¶¨Ïñ¥
        setMessages([])
        setUploadedFile(null)
        setChatHistory([])
        // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÎûúÎî©ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
        router.push('/')
      }
    })

    return () => unsubscribe()
  }, [router])

  // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Î∂àÎü¨Ïò§Í∏∞
  const loadChatHistory = async (user: User) => {
    try {
      console.log('üìö Loading chat history for:', user.uid)
      const sessions = await firestoreService.getChatSessions(user.uid)

      console.log('üìã Raw sessions from Firestore:', sessions)

      // ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÎäî Î™®Îì† Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ ÌëúÏãú (ÌîÑÎ°úÏ†ùÌä∏ ÌïÑÌÑ∞ÎßÅ Ï†úÍ±∞)
      setChatHistory(sessions)
      console.log('‚úÖ Chat history loaded and set:', sessions.length, 'sessions')

      // Í∞Å ÏÑ∏ÏÖòÏùò Ï†úÎ™©ÎèÑ Î°úÍπÖ
      sessions.forEach((session, index) => {
        console.log(`  ${index + 1}. ${session.title} (${session.id})`)
      })
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to load chat history (continuing without it):', error)
      setChatHistory([])
    }
  }

  // Ï±ÑÌåÖ ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî - Îã®ÏàúÌôî
  const initializeChatSession = async (user: User) => {
    console.log('üöÄ Initializing chat for:', user.email)

    // Ï†ÄÏû•Îêú ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏ ÌôïÏù∏ Î∞è ÏÑ§Ï†ï
    const savedProjectId = localStorage.getItem('currentProjectId')
    const savedIsProjectChat = localStorage.getItem('isProjectChat') === 'true'

    if (savedProjectId && savedIsProjectChat) {
      updateProjectContext(savedProjectId, true)
      console.log('üîÑ Restored project context:', savedProjectId)
    }

    // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Î∂àÎü¨Ïò§Í∏∞ (ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏Ïóê Îî∞Îùº ÌïÑÌÑ∞ÎßÅÎê®)
    await loadChatHistory(user)

    // Ï†ÄÏû•Îêú ÏÑ∏ÏÖòÏù¥ ÏûàÏúºÎ©¥ Î≥µÏõê, ÏóÜÏúºÎ©¥ ÌôòÏòÅ Î©îÏãúÏßÄ ÌëúÏãú
    const savedSessionId = localStorage.getItem('currentSessionId')
    if (savedSessionId && savedSessionId !== currentSessionId) {
      console.log('üîÑ Restoring saved session:', savedSessionId)
      try {
        // Ï†ÄÏû•Îêú ÏÑ∏ÏÖòÏùò Î©îÏãúÏßÄ Î∂àÎü¨Ïò§Í∏∞
        await handleSessionClick(savedSessionId)
        return // ÏÑ∏ÏÖò Î≥µÏõê ÏôÑÎ£å, ÌôòÏòÅ Î©îÏãúÏßÄÎäî ÌëúÏãúÌïòÏßÄ ÏïäÏùå
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to restore saved session, showing welcome message:', error)
        localStorage.removeItem('currentSessionId') // ÏûòÎ™ªÎêú ÏÑ∏ÏÖò ID Ï†úÍ±∞
      }
    }
    
    // ÌôòÏòÅ Î©îÏãúÏßÄ ÌëúÏãú (Ï†ÄÏû•Îêú ÏÑ∏ÏÖòÏù¥ ÏóÜÍ±∞ÎÇò Î≥µÏõê Ïã§Ìå®Ìïú Í≤ΩÏö∞)
    const welcomeMessage: Message = {
      id: '1',
      type: 'assistant',
      content: t('auth.welcomeMessage'),
      timestamp: new Date()
    }
    setMessages([welcomeMessage])
    
    // ÌôòÏòÅ Î©îÏãúÏßÄ ÌëúÏãú Ïãú currentSessionIdÎ•º nullÎ°ú ÏÑ§Ï†ï (ÌûàÏä§ÌÜ†Î¶¨ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞)
    updateCurrentSessionId(null)

    // ÏÇ¨Ïö©Ïûê Ï†ÄÏû• ÏãúÎèÑ
    try {
      await userService.createOrUpdateUser(user);
      console.log('‚úÖ User saved successfully')
      
      // ÏûêÎèô ÏÑ∏ÏÖò ÏÉùÏÑ± Ï†úÍ±∞ - ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë Ï±ÑÌåÖÏùÑ ÏãúÏûëÌï† ÎïåÍπåÏßÄ ÎåÄÍ∏∞
      // const sessionId = await firestoreService.createChatSession(user.uid)
      // setCurrentSessionId(sessionId)
      // console.log('‚úÖ Chat session created')

      // Í∏∞Ï°¥ ÌûàÏä§ÌÜ†Î¶¨Îßå Î∂àÎü¨Ïò§Í∏∞ (ÏÉà ÏÑ∏ÏÖò ÏÉùÏÑ± ÏïàÌï®)
      // await loadChatHistory(user)

    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to initialize Firestore (continuing with temp session):', error)
      updateCurrentSessionId(`temp_${Date.now()}`)
    }
  }

  const scrollToBottom = (immediate = false) => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({
        behavior: immediate ? 'instant' : 'smooth',
        block: 'end'
      })
    }
  }

  // Ïä§ÌÅ¨Î°§ ÏúÑÏπòÎ•º Í∞êÏßÄÌïòÏó¨ ÏûêÎèô Ïä§ÌÅ¨Î°§ ÌôúÏÑ±Ìôî/ÎπÑÌôúÏÑ±Ìôî
  const handleScroll = (e: Event) => {
    const target = e.target as HTMLElement
    if (!target) return

    const { scrollTop, scrollHeight, clientHeight } = target
    const isNearBottom = scrollTop + clientHeight >= scrollHeight - 50 // 50px Ïó¨Ïú†

    setIsAutoScrollEnabled(isNearBottom)
  }




  // Ï∞®Ìä∏ ÌôïÎåÄ ÏÉÅÌÉúÎ•º booleanÏúºÎ°ú Î≥ÄÌôòÌïòÏó¨ dependency ÏïàÏ†ïÌôî
  const isChartExpanded = !!expandedChart

  // Ïä§ÌÅ¨Î°§ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
  useEffect(() => {
    const chatContainer = document.querySelector('.chat-messages-container')
    if (chatContainer) {
      chatContainer.addEventListener('scroll', handleScroll)
      return () => chatContainer.removeEventListener('scroll', handleScroll)
    }
  }, [])

  // ÏûêÎèô Ïä§ÌÅ¨Î°§: ÏÉàÎ°úÏö¥ Î©îÏãúÏßÄÍ∞Ä Ï∂îÍ∞ÄÎêòÍ±∞ÎÇò Î°úÎî© Ï§ëÏùº Îïå ÏûêÎèôÏúºÎ°ú Îß® ÏïÑÎûòÎ°ú Ïä§ÌÅ¨Î°§
  // Îã®, Ï∞®Ìä∏ ÌôïÎåÄ ÏÉÅÌÉúÏùº ÎïåÎäî ÏûêÎèô Ïä§ÌÅ¨Î°§ ÎπÑÌôúÏÑ±Ìôî
  useEffect(() => {
    // Ï∞®Ìä∏ ÌôïÎåÄ ÏÉÅÌÉúÏóêÏÑúÎäî ÏûêÎèô Ïä§ÌÅ¨Î°§ ÎπÑÌôúÏÑ±Ìôî
    if (isChartExpanded) return

    // Î©îÏãúÏßÄÍ∞Ä ÏûàÍ±∞ÎÇò Î°úÎî© Ï§ëÏùº Îïå ÏûêÎèô Ïä§ÌÅ¨Î°§ (ÏûêÎèô Ïä§ÌÅ¨Î°§Ïù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞Îßå)
    if ((messages.length > 0 || isLoading) && isAutoScrollEnabled) {
      // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ÏùÑ ÎëêÏñ¥ DOM ÏóÖÎç∞Ïù¥Ìä∏Î•º Í∏∞Îã§Î¶∞ ÌõÑ Ïä§ÌÅ¨Î°§
      const timer = setTimeout(() => scrollToBottom(false), 100)
      return () => clearTimeout(timer)
    }
  }, [messages, isLoading, isChartExpanded, isAutoScrollEnabled])

  // Î°úÎî© Ï§ëÏùº Îïå ÏßÄÏÜçÏ†ÅÏù∏ Ïä§ÌÅ¨Î°§ (ChatGPTÏ≤òÎüº)
  // Îã®, Ï∞®Ìä∏ ÌôïÎåÄ ÏÉÅÌÉúÏùº ÎïåÎäî ÏûêÎèô Ïä§ÌÅ¨Î°§ ÎπÑÌôúÏÑ±Ìôî
  useEffect(() => {
    // Ï∞®Ìä∏ ÌôïÎåÄ ÏÉÅÌÉúÏóêÏÑúÎäî ÏûêÎèô Ïä§ÌÅ¨Î°§ ÎπÑÌôúÏÑ±Ìôî
    if (isChartExpanded) return

    if (isLoading && isAutoScrollEnabled) {
      const interval = setInterval(() => {
        scrollToBottom(false)
      }, 500) // 0.5Ï¥àÎßàÎã§ Ïä§ÌÅ¨Î°§ ÌôïÏù∏

      return () => clearInterval(interval)
    }
  }, [isLoading, isChartExpanded, isAutoScrollEnabled])

  // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìè¨Îß∑ÌåÖ
  const formatTimestamp = (timestamp: any) => {
    if (!timestamp) return ''
    
    let date: Date
    if (timestamp.toDate) {
      // Firestore Timestamp
      date = timestamp.toDate()
    } else if (timestamp instanceof Date) {
      date = timestamp
    } else {
      date = new Date(timestamp)
    }
    
    const now = new Date()
    const diffMs = now.getTime() - date.getTime()
    const diffMins = Math.floor(diffMs / (1000 * 60))
    const diffHours = Math.floor(diffMins / 60)
    const diffDays = Math.floor(diffHours / 24)
    
    if (diffMins < 1) return 'Î∞©Í∏à Ï†Ñ'
    if (diffMins < 60) return `${diffMins}Î∂Ñ Ï†Ñ`
    if (diffHours < 24) return `${diffHours}ÏãúÍ∞Ñ Ï†Ñ`
    if (diffDays === 1) return 'Ïñ¥Ï†ú'
    if (diffDays < 7) return `${diffDays}Ïùº Ï†Ñ`
    
    return date.toLocaleDateString('ko-KR')
  }

  // ÏÑ∏ÏÖò ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleSessionClick = async (sessionId: string) => {
    console.log('üéØ handleSessionClick called with:', { sessionId, currentSessionId, hasUser: !!user })
    
    if (!user) {
      console.log('‚ùå No user available for session click')
      return
    }
    
    if (sessionId === currentSessionId) {
      console.log('üîÑ Session click ignored - same session:', sessionId)
      return
    }
    
    try {
      console.log('üîÑ Loading session:', sessionId)
      console.log('üîÑ Current user:', user.uid)
      console.log('üîÑ Previous sessionId:', currentSessionId)
      
      updateCurrentSessionId(sessionId)
      console.log('‚úÖ Updated currentSessionId to:', sessionId)
      
      // Ï±ÑÌåÖ ÌéòÏù¥ÏßÄÎ°ú Ï†ÑÌôò
      setCurrentPage('chat')
      console.log('üì± Switched to chat page')
      
      // ÏÑ†ÌÉùÌïú ÏÑ∏ÏÖòÏùò Î©îÏãúÏßÄÎì§ Î∂àÎü¨Ïò§Í∏∞
      console.log('üì° Fetching messages for session:', sessionId)
      const sessionMessages = await firestoreService.getMessages(sessionId)
      console.log('üì® Raw messages from Firestore:', sessionMessages)
      console.log('üì® Number of messages found:', sessionMessages.length)
      
      if (sessionMessages.length === 0) {
        console.warn('‚ö†Ô∏è No messages found for session:', sessionId)
        setMessages([])
        setUploadedFile(null) // Î©îÏãúÏßÄÍ∞Ä ÏóÜÏúºÎ©¥ ÌååÏùºÎèÑ ÏóÜÏùå
        return
      }
      
      // Î©îÏãúÏßÄ ÌòïÏãù Î≥ÄÌôò Î∞è ÌååÏùº Ï†ïÎ≥¥ Î≥µÍµ¨
      let sessionFileInfo = null
      const convertedMessages: Message[] = sessionMessages.map((msg, index) => {
        console.log(`üìù Converting message ${index + 1}:`, msg)
        
        // ÌååÏùº Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Î©îÏãúÏßÄÏóêÏÑú ÌååÏùº Ï†ïÎ≥¥ Ï∂îÏ∂ú
        if (msg.fileInfo && !sessionFileInfo && msg.fileInfo.file_id) {
          console.log('üìÅ Found file info in message:', msg.fileInfo)
          sessionFileInfo = {
            file_id: msg.fileInfo.file_id, // Ïã§Ï†ú file_id ÏÇ¨Ïö© (restored_ ÏÉùÏÑ± Î∞©ÏßÄ)
            name: msg.fileInfo.filename,
            size: msg.fileInfo.fileSize,
            columns: msg.tableData?.columns || [],
            rows: msg.tableData?.data?.length || 0,
            preview: msg.tableData?.data || [],
            restored: false // file_idÍ∞Ä ÏûàÏúºÎØÄÎ°ú Î≥µÍµ¨Îêú ÌååÏùºÏù¥ ÏïÑÎãò
          }
        }
        
        return {
          id: msg.id || msg.timestamp?.toString() || `msg-${index}`,
          type: msg.type,
          content: msg.content,
          timestamp: msg.timestamp?.toDate ? msg.timestamp.toDate() : new Date(msg.timestamp || Date.now()),
          chartData: msg.chartData,
          insights: msg.insights,
          followUpQuestions: msg.followUpQuestions,
          fileInfo: msg.fileInfo,
          tableData: msg.tableData,
          codeExecution: msg.codeExecution
        }
      })
      
      console.log('‚úÖ Converted messages:', convertedMessages)
      setMessages(convertedMessages)

      // ÏÑ∏ÏÖò Ï†ÑÌôò Ïãú ÏûÖÎ†• Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅ
      setInputKey(Date.now())
      
      // ÏÑ∏ÏÖòÏóê ÌååÏùº Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Î≥µÍµ¨
      if (sessionFileInfo) {
        console.log('üìÅ Restoring file info for session:', sessionFileInfo)
        setUploadedFile(sessionFileInfo)
      } else {
        // ÌååÏùºÏù¥ ÏóÜÏúºÎ©¥ Ï¥àÍ∏∞Ìôî
        setUploadedFile(null)
        // ÏÑ∏ÏÖòÏóêÏÑú FirestoreÏóê Ï†ÄÏû•Îêú ÌååÏùº Ï†ïÎ≥¥ ÌôïÏù∏
        try {
          const sessionData = await firestoreService.getChatSession(sessionId)
          if (sessionData?.fileId && sessionData?.fileName) {
            console.log('üìÅ Found file info in session metadata:', sessionData)
            setUploadedFile({
              file_id: sessionData.fileId, // Ïã§Ï†ú file_id ÏÇ¨Ïö©
              name: sessionData.fileName,
              size: 0, // Ï†ïÌôïÌïú ÌÅ¨Í∏∞Îäî Ïïå Ïàò ÏóÜÏùå
              restored: false, // Ïã§Ï†ú file_idÍ∞Ä ÏûàÏúºÎØÄÎ°ú Î≥µÍµ¨Îêú ÌååÏùºÏù¥ ÏïÑÎãò
              fileUrl: sessionData.fileUrl
            })
          } else {
            setUploadedFile(null)
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Could not restore file info from session metadata:', error)
          setUploadedFile(null)
        }
      }
      
      console.log('‚úÖ Session loaded with', convertedMessages.length, 'messages')
      
    } catch (error) {
      console.error('‚ùå Failed to load session:', error)
      console.error('‚ùå Error details:', error.message)
      setUploadedFile(null)
    }
  }

  const handleFollowUpClick = (question: string) => {
    handleSendMessage(question)
  }

  const handleMessageUpdate = (messageId: string, updates: Partial<Message>) => {
    setMessages(prevMessages =>
      prevMessages.map(msg =>
        msg.id === messageId ? { ...msg, ...updates } : msg
      )
    )
  }

  // Ï±ÑÌåÖ Î©îÎâ¥ Ïï°ÏÖòÎì§
  const handleRenameChat = (sessionId: string) => {
    // TODO: Ïù¥Î¶Ñ Î≥ÄÍ≤Ω Í∏∞Îä• Íµ¨ÌòÑ
    console.log('Rename chat:', sessionId)
    setOpenMenuId(null)
  }

  const handleShareChat = (sessionId: string) => {
    // TODO: Í≥µÏú† Í∏∞Îä• Íµ¨ÌòÑ
    console.log('Share chat:', sessionId)
    setOpenMenuId(null)
  }

  const handleDeleteChatClick = (sessionId: string, sessionTitle: string) => {
    setDeleteConfirmModal({
      isOpen: true,
      sessionId,
      sessionTitle
    })
    setOpenMenuId(null)
  }

  const handleDeleteChatConfirm = async () => {
    if (!user || !deleteConfirmModal.sessionId) return

    try {
      await firestoreService.deleteChatSession(deleteConfirmModal.sessionId)
      // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ ÏÉàÎ°úÍ≥†Ïπ®
      await loadChatHistory(user)
      // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑ∏ÏÖòÏù¥ ÏÇ≠Ï†úÎêú Í≤ΩÏö∞ Ï¥àÍ∏∞Ìôî
      if (currentSessionId === deleteConfirmModal.sessionId) {
        updateCurrentSessionId(null)
        setMessages([])
        setUploadedFile(null)
      }
      console.log('Chat deleted:', deleteConfirmModal.sessionId)
    } catch (error) {
      console.error('Failed to delete chat:', error)
    }

    // Î™®Îã¨ Îã´Í∏∞
    setDeleteConfirmModal({
      isOpen: false,
      sessionId: null,
      sessionTitle: null
    })
  }

  const handleDeleteChatCancel = () => {
    setDeleteConfirmModal({
      isOpen: false,
      sessionId: null,
      sessionTitle: null
    })
  }

  // Ï∞®Ìä∏ ÌôïÎåÄ Í∏∞Îä•
  const [savedScrollPosition, setSavedScrollPosition] = useState<number>(0)


  const handleChartExpand = (chartData: any, title: string) => {
    // ÌòÑÏû¨ Ïä§ÌÅ¨Î°§ ÏúÑÏπò Ï†ÄÏû•
    const chatMessagesContainer = document.querySelector('.flex-1.overflow-y-auto') as HTMLElement
    if (chatMessagesContainer) {
      const scrollTop = chatMessagesContainer.scrollTop
      setSavedScrollPosition(scrollTop)
      console.log('üíæ Saved scroll position:', scrollTop)
    }

    setExpandedChart({ chartData, title })
  }

  const handleChartClose = () => {
    setExpandedChart(null)

    // Ï†ÄÏû•Îêú Ïä§ÌÅ¨Î°§ ÏúÑÏπòÎ°ú Î≥µÏõê
    setTimeout(() => {
      const chatMessagesContainer = document.querySelector('.flex-1.overflow-y-auto') as HTMLElement
      if (chatMessagesContainer && savedScrollPosition > 0) {
        chatMessagesContainer.scrollTop = savedScrollPosition
        console.log('üîÑ Restored scroll position:', savedScrollPosition)
      }
    }, 100) // DOM ÏóÖÎç∞Ïù¥Ìä∏ ÎåÄÍ∏∞
  }

  // Î¶¨ÏÇ¨Ïù¥Ï†Ä Í∏∞Îä•
  useEffect(() => {
    const handleMouseDown = (e: MouseEvent) => {
      if (!resizerRef.current?.contains(e.target as Node)) return

      const startX = e.clientX
      const startWidth = panelWidth

      const handleMouseMove = (e: MouseEvent) => {
        const deltaX = e.clientX - startX
        // ÏÇ¨Ïù¥ÎìúÎ∞î ÎÑàÎπÑÎ•º ÎèôÏ†ÅÏúºÎ°ú Í≥ÑÏÇ∞ (min-width Í≥†Î†§)
        const sidebarWidth = isSidebarCollapsed ? Math.max(64, window.innerWidth * 0.064) : Math.max(256, window.innerWidth * 0.256)
        const containerWidth = Math.max(320, window.innerWidth - sidebarWidth) // ÏµúÏÜå 320px Î≥¥Ïû•
        const deltaPercent = (deltaX / containerWidth) * 100

        // ÌôîÎ©¥ ÌÅ¨Í∏∞Ïóê Îî∞Î•∏ ÎèôÏ†Å Ï†úÌïú
        const minWidth = window.innerWidth < 768 ? 30 : 20 // Î™®Î∞îÏùºÏóêÏÑú ÏµúÏÜå 30%
        const maxWidth = window.innerWidth < 768 ? 70 : 80 // Î™®Î∞îÏùºÏóêÏÑú ÏµúÎåÄ 70%

        const newWidth = Math.min(maxWidth, Math.max(minWidth, startWidth - deltaPercent))
        setPanelWidth(newWidth)
      }

      const handleMouseUp = () => {
        document.removeEventListener('mousemove', handleMouseMove)
        document.removeEventListener('mouseup', handleMouseUp)
        document.body.style.cursor = 'default'
        document.body.style.userSelect = 'auto'

        // Î¶¨ÏÇ¨Ïù¥Ï¶à ÏôÑÎ£å ÌõÑ Ï∞®Ìä∏ Î¶¨ÏÇ¨Ïù¥Ï¶à Ìä∏Î¶¨Í±∞
        setTimeout(() => {
          if (window.Plotly && expandedChart) {
            const chartElements = document.querySelectorAll('.plotly-chart-container')
            chartElements.forEach((element) => {
              window.Plotly.Plots.resize(element)
            })
          }
        }, 100)
      }

      document.addEventListener('mousemove', handleMouseMove)
      document.addEventListener('mouseup', handleMouseUp)
      document.body.style.cursor = 'col-resize'
      document.body.style.userSelect = 'none'
    }

    document.addEventListener('mousedown', handleMouseDown)
    return () => document.removeEventListener('mousedown', handleMouseDown)
  }, [panelWidth, isSidebarCollapsed, expandedChart])

  // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïãú Ï∞®Ìä∏ Î¶¨ÏÇ¨Ïù¥Ï¶à Î∞è Î∞òÏùëÌòï Ï≤òÎ¶¨
  useEffect(() => {
    const handleWindowResize = () => {
      // Ï∞®Ìä∏ Î¶¨ÏÇ¨Ïù¥Ï¶à
      if (window.Plotly && expandedChart) {
        setTimeout(() => {
          const chartElements = document.querySelectorAll('.plotly-chart-container')
          chartElements.forEach((element) => {
            window.Plotly.Plots.resize(element)
          })
        }, 100)
      }

      // ÏûëÏùÄ ÌôîÎ©¥ÏóêÏÑú ÏÇ¨Ïù¥ÎìúÎ∞î ÏûêÎèô Ï∂ïÏÜå
      if (window.innerWidth < 768 && !isSidebarCollapsed) {
        setIsSidebarCollapsed(true)
        if (typeof window !== 'undefined') {
          localStorage.setItem('sidebarCollapsed', 'true')
        }
      }

      // Ï∞®Ìä∏ Ìå®ÎÑê ÎÑàÎπÑ Ï°∞Ï†ï (ÌôîÎ©¥Ïù¥ ÎÑàÎ¨¥ ÏûëÏïÑÏßÄÎ©¥)
      if (expandedChart && window.innerWidth < 1024) {
        const newMaxWidth = window.innerWidth < 768 ? 70 : 75
        if (panelWidth > newMaxWidth) {
          setPanelWidth(newMaxWidth)
        }
      }
    }

    window.addEventListener('resize', handleWindowResize)
    return () => window.removeEventListener('resize', handleWindowResize)
  }, [expandedChart, isSidebarCollapsed, panelWidth])

  // Î°úÍ∑∏ÏïÑÏõÉ Ìï®Ïàò
  const handleLogout = async () => {
    try {
      await authService.signOut()
      setIsProfileMenuOpen(false)
      console.log('‚úÖ Logout successful')
    } catch (error) {
      console.error('‚ùå Logout failed:', error)
    }
  }

  // ÏÉà Ï±ÑÌåÖ ÏãúÏûë
  const handleNewChat = async () => {
    if (!user) return

    console.log('üÜï Starting new chat (default welcome screen)')

    // ÏÑ∏ÏÖò IDÎ•º nullÎ°ú ÏÑ§Ï†ï (ÌûàÏä§ÌÜ†Î¶¨ ÌïòÏù¥ÎùºÏù¥Ìä∏ Ï†úÍ±∞)
    updateCurrentSessionId(null)

    // ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏ ÌÅ¥Î¶¨Ïñ¥ (Ï†ÑÏó≠ Ï±ÑÌåÖÏúºÎ°ú Ï†ÑÌôò)
    clearProjectContext()

    // ÌôòÏòÅ Î©îÏãúÏßÄÎßå ÌëúÏãú (ÏÑ∏ÏÖò ÏÉùÏÑ± ÏïàÌï®)
    const welcomeMessage: Message = {
      id: '1',
      type: 'assistant',
      content: t('auth.welcomeMessage'),
      timestamp: new Date()
    }
    setMessages([welcomeMessage])

    // ÌååÏùº Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî (ÏÉà Ï±ÑÌåÖÏù¥ÎØÄÎ°ú)
    setUploadedFile(null)

    // Ï±ÑÌåÖ ÏûÖÎ†• Ïª¥Ìè¨ÎÑåÌä∏ Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅÏùÑ ÏúÑÌïú ÌÇ§ ÏóÖÎç∞Ïù¥Ìä∏
    setInputKey(Date.now())

    // Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Îã§Ïãú Î°úÎìú (Ï†ÑÏó≠ Ï±ÑÌåÖÎßå ÌëúÏãú)
    await loadChatHistory(user)

    console.log('‚úÖ Default welcome screen displayed (no session created yet)')
  }

  const handleSendMessage = async (content: string) => {
    if (!content.trim() || isLoading || !user) return

    // ÏÉà Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïãú ÏûêÎèô Ïä§ÌÅ¨Î°§ Îã§Ïãú ÌôúÏÑ±Ìôî
    setIsAutoScrollEnabled(true)

    // ÏÑ∏ÏÖòÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±
    let sessionId = currentSessionId
    let isNewSession = false
    console.log('üîç Current sessionId:', sessionId, 'from localStorage:', localStorage.getItem('currentSessionId'))

    // Í∞úÎ∞ú ÌÖåÏä§Ìä∏Î•º ÏúÑÌï¥ ÏÉà ÏÑ∏ÏÖò Í∞ïÏ†ú ÏÉùÏÑ± (ÌÖåÏä§Ìä∏ ÌõÑ Ï†úÍ±∞ ÌïÑÏöî)
    if (!sessionId || sessionId.startsWith('temp_')) {
      try {
        // Ï≤´ Î©îÏãúÏßÄÎ°ú Ï¶âÏãú Ï†úÎ™© ÏÉùÏÑ±
        console.log('üè∑Ô∏è Generating title for new session with first message:', content)

        let generatedTitle = 'ÏÉà Ï±ÑÌåÖ' // Í∏∞Î≥∏Í∞í
        try {
          const titleResponse = await apiService.generateChatTitle(content)
          generatedTitle = titleResponse.title || 'ÏÉà Ï±ÑÌåÖ'
          console.log('‚úÖ Title generated successfully:', generatedTitle)
        } catch (titleError) {
          console.error('‚ùå Failed to generate title, using default:', titleError)
          // Ï†úÎ™© ÏÉùÏÑ± Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ
        }

        sessionId = await firestoreService.createChatSession(user.uid, generatedTitle)
        updateCurrentSessionId(sessionId)
        isNewSession = true
        console.log('‚úÖ New session created with title:', sessionId, generatedTitle)

        // ÏÉà ÏÑ∏ÏÖò ÏÉùÏÑ± ÏßÅÌõÑ Ï¶âÏãú ÌûàÏä§ÌÜ†Î¶¨ ÏÉàÎ°úÍ≥†Ïπ®
        try {
          console.log('üîÑ Refreshing chat history immediately after session creation')
          await loadChatHistory(user)
        } catch (historyError) {
          console.warn('‚ö†Ô∏è Failed to reload chat history after session creation:', historyError)
        }
      } catch (error) {
        console.error('‚ùå Failed to create session:', error)
        sessionId = `temp_${Date.now()}`
        updateCurrentSessionId(sessionId)
      }
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])

    // Ï¥àÍ∏∞ AI ÏùëÎãµ Î©îÏãúÏßÄ ÏÉùÏÑ± (Ìï≠ÏÉÅ "Ï≤òÎ¶¨ Ï§ë..." ÏúºÎ°ú ÏãúÏûë)
    const assistantMessageId = (Date.now() + 1).toString()
    const initialAssistantMessage: Message = {
      id: assistantMessageId,
      type: 'assistant',
      content: 'Ï≤òÎ¶¨ Ï§ë...',
      timestamp: new Date(),
      isStreaming: true  // Ïä§Ìä∏Î¶¨Î∞ç ÏãúÏûë
    }

    setMessages(prev => [...prev, initialAssistantMessage])

    // Ï≤´ Î≤àÏß∏ ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄÏù∏ÏßÄ ÌôïÏù∏ (ÌôòÏòÅ Î©îÏãúÏßÄ Ï†úÏô∏)
    const isFirstUserMessage = messages.length <= 1 || messages.filter(m => m.type === 'user').length === 0

    try {
      // FirestoreÏóê ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï†ÄÏû• ÏãúÎèÑ (Ïã§Ìå®Ìï¥ÎèÑ Í≥ÑÏÜç ÏßÑÌñâ)
      if (sessionId && !sessionId.startsWith('temp_')) {
        try {
          console.log('üíæ Attempting to save user message:', {
            sessionId,
            userId: user.uid,
            messageType: userMessage.type,
            contentLength: userMessage.content.length
          })

          await firestoreService.addMessage({
            sessionId: sessionId,
            userId: user.uid,
            type: userMessage.type,
            content: userMessage.content,
            timestamp: userMessage.timestamp as any
          })
          console.log('‚úÖ User message saved to Firestore successfully')
        } catch (firestoreError: any) {
          console.error('‚ùå CRITICAL: Failed to save user message:', {
            error: firestoreError,
            errorMessage: firestoreError?.message,
            errorCode: firestoreError?.code,
            sessionId,
            userId: user.uid,
            userMessageId: userMessage.id
          })
        }
      } else {
        console.log('‚ö†Ô∏è Skipping user message save:', {
          sessionId,
          isTemp: sessionId?.startsWith('temp_'),
          reason: !sessionId ? 'No session ID' : 'Temporary session'
        })
      }

      // WebSocketÏúºÎ°ú Î∂ÑÏÑù ÏãúÏûë ÏïåÎ¶º
      if (isConnected) {
        sendWebSocketMessage({ type: 'start_analysis' })
      }

      // ÌÜµÌï© APIÎ•º ÏÇ¨Ïö©Ìïú AI ÏùëÎãµ ÏÉùÏÑ±
      let assistantMessage: Message;

      try {
        // Î≥µÏõêÎêú ÌååÏùºÏù∏ÏßÄ ÌôïÏù∏ (restored_ Ï†ëÎëêÏÇ¨Î°ú ÏãúÏûëÌïòÎäî Í≤ΩÏö∞)
        if (uploadedFile && uploadedFile.file_id.startsWith('restored_')) {
          assistantMessage = {
            id: (Date.now() + 1).toString(),
            type: 'assistant',
            content: 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ïù¥ Ï±ÑÌåÖÏóêÏÑú ÏÇ¨Ïö©Îêú ÌååÏùºÏù¥ Îçî Ïù¥ÏÉÅ ÏÑúÎ≤ÑÏóê Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏÉàÎ°úÏö¥ ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.',
            timestamp: new Date()
          }
        } else {
          // ÎåÄÌôî ÌûàÏä§ÌÜ†Î¶¨ Ï§ÄÎπÑ (ÏµúÍ∑º 10Í∞ú Î©îÏãúÏßÄÎßå)
          const conversationHistory = messages
            .filter(msg => msg.type === 'user' || msg.type === 'assistant')
            .slice(-10)
            .map(msg => ({
              role: msg.type === 'user' ? 'user' as const : 'assistant' as const,
              content: msg.content,
              timestamp: msg.timestamp.toISOString()
            }))

          // ÏµúÏ¢Ö Î©îÏãúÏßÄ ÏÉÅÌÉú Ï∂îÏ†ÅÏö©
          let finalAssistantMessage: Message = { ...initialAssistantMessage }
          let textBuffer = '' // textBufferÎ•º Ïô∏Î∂Ä Ïä§ÏΩîÌîÑÏóê ÏÑ†Ïñ∏

          // Ïä§Ìä∏Î¶¨Î∞ç ÏãúÏûë
          await apiService.askUnifiedQuestionStream(
            {
              question: content,
              file_id: uploadedFile?.file_id || null,
              conversation_history: conversationHistory
            },
            // onChunk: ChatGPT Ïä§ÌÉÄÏùº Ïã§ÏãúÍ∞Ñ Î©îÏãúÏßÄ ÏóÖÎç∞Ïù¥Ìä∏ (ÏµúÏ†ÅÌôîÎê®)
            (() => {
              let lastTextUpdate = 0
              const TEXT_UPDATE_THROTTLE = 0 // Disable throttling temporarily

              return (chunk) => {
                console.log('üì¶ Received chunk:', chunk.type, chunk.content?.substring?.(0, 20))

                // text_streamÏùò Í≤ΩÏö∞ÏóêÎßå throttling Ï†ÅÏö© (code_streamÏùÄ Ï¶âÏãú Ï≤òÎ¶¨)
                if (chunk.type === 'text_stream') {
                  textBuffer += chunk.content
                  const now = Date.now()

                  if (now - lastTextUpdate < TEXT_UPDATE_THROTTLE) {
                    // throttlingÏúºÎ°ú UI ÏóÖÎç∞Ïù¥Ìä∏Îäî Í±¥ÎÑàÎõ∞ÏßÄÎßå ÌÖçÏä§Ìä∏Îäî Í≥ÑÏÜç Ï≤òÎ¶¨
                    // textBufferÍ∞Ä ÎàÑÏ†ÅÎêòÏñ¥ Îã§Ïùå ÏóÖÎç∞Ïù¥Ìä∏ÏóêÏÑú Î∞òÏòÅÎê®
                    return // Skip UI update but continue accumulating
                  }
                  lastTextUpdate = now
                }

                // code_streamÏùÄ Ï¶âÏãú Ï≤òÎ¶¨ (throttling ÏóÜÏùå)
                if (chunk.type === 'code_stream') {
                  console.log('üî• Processing code_stream immediately:', chunk.content)
                }

                setMessages(prevMessages => {
                  return prevMessages.map(msg => {
                    if (msg.id === assistantMessageId) {
                      const updatedMessage = { ...msg }

                      switch (chunk.type) {
                        case 'analysis_start':
                        case 'step_update':
                          // "Ï≤òÎ¶¨ Ï§ë..." ÏùÑ Ïã§Ï†ú Î∂ÑÏÑù Îã®Í≥ÑÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
                          updatedMessage.content = chunk.content
                          break

                        case 'code_complete_display':
                          // ÏôÑÏÑ±Îêú ÏΩîÎìúÎ•º Ìïú Î≤àÏóê ÌëúÏãú
                          updatedMessage.codeExecution = {
                            codeChunks: chunk.code.split('\n').filter(line => line.trim()),
                            isExecuting: true,
                            result: '',
                            output: ''
                          }
                          // ÏΩîÎìúÍ∞Ä ÌëúÏãúÎêú ÌõÑÏóêÎäî content ÏóÖÎç∞Ïù¥Ìä∏Î•º Ï§ëÎã®
                          updatedMessage.content = ''
                          break

                        case 'code_stream':
                          // Îçî Ïù¥ÏÉÅ ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå (ÏôÑÏÑ±Îêú ÏΩîÎìúÎßå ÌëúÏãú)
                          break

                        case 'code_execution_result':
                          // ÏΩîÎìú Ïã§Ìñâ ÏôÑÎ£å
                          if (updatedMessage.codeExecution) {
                            updatedMessage.codeExecution.isExecuting = false
                            updatedMessage.codeExecution.result = chunk.content
                            updatedMessage.codeExecution.output = chunk.content
                          }
                          break

                        case 'chart_generated':
                          // Ï∞®Ìä∏Í∞Ä ÏÉùÏÑ±ÎêòÎ©¥ ÌëúÏãú
                          updatedMessage.chartData = chunk.chartData
                          break


                        case 'insights_generated':
                          // Ïù∏ÏÇ¨Ïù¥Ìä∏ ÌëúÏãú ÎπÑÌôúÏÑ±Ìôî (text_streamÏúºÎ°ú ÌÜµÌï©)
                          // updatedMessage.insights = chunk.insights
                          break

                        case 'analysis_complete':
                          // ÏΩîÎìúÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå ÏµúÏ¢Ö ÌÖçÏä§Ìä∏ ÏùëÎãµ Ï†ÅÏö©
                          if (!updatedMessage.codeExecution && textBuffer) {
                            updatedMessage.content += textBuffer
                            textBuffer = ''
                          }
                          updatedMessage.chartData = chunk.chartData
                          // insights Ï†úÍ±∞: updatedMessage.insights = chunk.insights
                          updatedMessage.followUpQuestions = chunk.followUpQuestions || []
                          if (chunk.codeExecution) {
                            updatedMessage.codeExecution = chunk.codeExecution
                          }
                          updatedMessage.isStreaming = false  // Ïä§Ìä∏Î¶¨Î∞ç ÏôÑÎ£å
                          break

                        case 'text_stream':
                          // ÏΩîÎìúÍ∞Ä Ïã§Ìñâ Ï§ëÏùº ÎïåÎßå ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ëÎã® (ÏôÑÎ£å ÌõÑÏóêÎäî ÌóàÏö©)
                          console.log('üî§ text_stream case:', {
                            hasCodeExecution: !!updatedMessage.codeExecution,
                            isExecuting: updatedMessage.codeExecution?.isExecuting,
                            chunkContent: chunk.content,
                            currentContent: updatedMessage.content.substring(0, 50)
                          })
                          const canAddText = !updatedMessage.codeExecution || !updatedMessage.codeExecution.isExecuting
                          console.log('üîç Can add text?', canAddText)

                          if (canAddText && chunk.content) {
                            console.log('üí¨ Adding chunk content to message:', chunk.content.substring(0, 50))
                            const beforeLength = updatedMessage.content.length
                            updatedMessage.content += chunk.content
                            console.log(`üìù Content updated: ${beforeLength} -> ${updatedMessage.content.length}`)
                          } else if (!canAddText) {
                            console.log('üö´ Text blocked due to code execution')
                          }
                          break

                        case 'error':
                          updatedMessage.content = chunk.content
                          if (updatedMessage.codeExecution) {
                            updatedMessage.codeExecution.isExecuting = false
                          }
                          updatedMessage.isStreaming = false  // ÏóêÎü¨ ÏãúÏóêÎèÑ Ïä§Ìä∏Î¶¨Î∞ç Ï¢ÖÎ£å
                          break

                        default:
                          // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÏΩòÌÖêÏ∏† ÏóÖÎç∞Ïù¥Ìä∏
                          if (chunk.content) {
                            updatedMessage.content = chunk.content
                          }
                          break
                      }

                      // ÏµúÏ¢Ö Î©îÏãúÏßÄ ÏÉÅÌÉúÎ•º Ï∂îÏ†Å
                      finalAssistantMessage = { ...updatedMessage }
                      return updatedMessage
                    }
                    return msg
                  })
                })
              }

            })(),
            // onError
            (error) => {
              console.error('Ïä§Ìä∏Î¶¨Î∞ç Ïò§Î•ò:', error)
              setMessages(prevMessages => {
                return prevMessages.map(msg => {
                  if (msg.id === assistantMessageId) {
                    return {
                      ...msg,
                      content: `Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error.message}`,
                      codeExecution: msg.codeExecution ? {
                        ...msg.codeExecution,
                        isExecuting: false
                      } : undefined
                    }
                  }
                  return msg
                })
              })
            },
            // onComplete
            async () => {
              console.log('‚úÖ Ïä§Ìä∏Î¶¨Î∞ç ÏôÑÎ£å, ÎÇ®ÏùÄ textBuffer:', textBuffer.length)

              // ÎÇ®ÏùÄ textBuffer Ï≤òÎ¶¨
              if (textBuffer) {
                console.log('üîÑ onCompleteÏóêÏÑú ÎÇ®ÏùÄ textBuffer Ï≤òÎ¶¨:', textBuffer.substring(0, 100))
                setMessages(prevMessages => {
                  return prevMessages.map(msg => {
                    if (msg.id === assistantMessageId) {
                      console.log('üîÑ ÏµúÏ¢Ö content ÏóÖÎç∞Ïù¥Ìä∏:', msg.content.length, '->', msg.content.length + textBuffer.length)
                      return {
                        ...msg,
                        content: msg.content + textBuffer
                      }
                    }
                    return msg
                  })
                })
                textBuffer = ''
              }

              // Ïä§Ìä∏Î¶¨Î∞ç ÏôÑÎ£å ÌõÑ FirestoreÏóê ÏµúÏ¢Ö Î©îÏãúÏßÄ Ï†ÄÏû•
              if (sessionId && !sessionId.startsWith('temp_')) {
                try {
                  console.log('üíæ Saving final message to Firestore:', finalAssistantMessage)

                  const messageData: any = {
                    sessionId: sessionId,
                    userId: user.uid,
                    type: finalAssistantMessage.type,
                    content: finalAssistantMessage.content,
                    timestamp: finalAssistantMessage.timestamp as any
                  }

                  // Ï∂îÍ∞Ä Îç∞Ïù¥ÌÑ∞Îì§ Ìè¨Ìï®
                  if (finalAssistantMessage.chartData) {
                    messageData.chartData = finalAssistantMessage.chartData
                  }
                  if (finalAssistantMessage.insights) {
                    messageData.insights = finalAssistantMessage.insights
                  }
                  if (finalAssistantMessage.followUpQuestions) {
                    messageData.followUpQuestions = finalAssistantMessage.followUpQuestions
                  }
                  if (finalAssistantMessage.fileInfo) {
                    messageData.fileInfo = finalAssistantMessage.fileInfo
                  }
                  if (finalAssistantMessage.tableData) {
                    messageData.tableData = finalAssistantMessage.tableData
                  }
                  if (finalAssistantMessage.codeExecution) {
                    messageData.codeExecution = finalAssistantMessage.codeExecution
                  }

                  await firestoreService.addMessage(messageData)
                  console.log('‚úÖ Ïä§Ìä∏Î¶¨Î∞ç ÏôÑÎ£åÎêú Î©îÏãúÏßÄÍ∞Ä FirestoreÏóê Ï†ÄÏû•Îê®')

                  // Ìï≠ÏÉÅ ÌûàÏä§ÌÜ†Î¶¨ ÏÉàÎ°úÍ≥†Ïπ® (ÏÉà ÏÑ∏ÏÖòÏù¥Í±∞ÎÇò Í∏∞Ï°¥ ÏÑ∏ÏÖòÏù¥Í±∞ÎÇò)
                  try {
                    console.log('üîÑ Refreshing chat history after message completion')
                    await loadChatHistory(user)
                  } catch (historyError) {
                    console.warn('‚ö†Ô∏è Failed to reload chat history:', historyError)
                  }
                } catch (firestoreError: any) {
                  console.error('‚ùå Ïä§Ìä∏Î¶¨Î∞ç ÏôÑÎ£å ÌõÑ Firestore Ï†ÄÏû• Ïã§Ìå®:', firestoreError)
                }
              }
            }
          )

          // Ïä§Ìä∏Î¶¨Î∞ç Ï≤òÎ¶¨ ÏôÑÎ£å, Í∏∞Ï°¥ Î°úÏßÅ Í±¥ÎÑàÎõ∞Í∏∞
          return
        }
      } catch (error) {
        console.error('Unified question error:', error)
        // Ïä§Ìä∏Î¶¨Î∞ç Ïã§Ìå® Ïãú Í∏∞Ï°¥ Î©îÏãúÏßÄÎ•º ÏóêÎü¨ Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
        setMessages(prevMessages => {
          return prevMessages.map(msg => {
            if (msg.id === assistantMessageId) {
              return {
                ...msg,
                content: 'Ï£ÑÏÜ°Ìï©ÎãàÎã§. ÌòÑÏû¨ ÎãµÎ≥ÄÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÎÇòÏ§ëÏóê Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.',
                codeExecution: msg.codeExecution ? {
                  ...msg.codeExecution,
                  isExecuting: false
                } : undefined
              }
            }
            return msg
          })
        })
      }

      // ÏÉà ÏÑ∏ÏÖòÏù∏ Í≤ΩÏö∞ ÌûàÏä§ÌÜ†Î¶¨ ÏÉàÎ°úÍ≥†Ïπ® (Ï†úÎ™©ÏùÄ Ïù¥ÎØ∏ ÏÉùÏÑ±Îê®)
      if (isNewSession) {
        try {
          console.log('üîÑ Refreshing chat history for new session')
          await loadChatHistory(user)
        } catch (historyError) {
          console.warn('‚ö†Ô∏è Failed to reload chat history:', historyError)
        }
      }
      
    } catch (error) {
      console.error('Analysis error:', error)

      // Í∏∞Ï°¥ Î©îÏãúÏßÄÎ•º ÏóêÎü¨ Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
      setMessages(prevMessages => {
        return prevMessages.map(msg => {
          if (msg.id === assistantMessageId) {
            return {
              ...msg,
              content: `Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`,
              codeExecution: msg.codeExecution ? {
                ...msg.codeExecution,
                isExecuting: false
              } : undefined
            }
          }
          return msg
        })
      })

      // Ïò§Î•ò Î©îÏãúÏßÄÎèÑ FirestoreÏóê Ï†ÄÏû•
      try {
        await firestoreService.addMessage({
          sessionId: currentSessionId,
          userId: user.uid,
          type: 'assistant',
          content: `Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`,
          timestamp: new Date() as any
        })
      } catch (firestoreError) {
        console.error('Error saving error message to Firestore:', firestoreError)
      }
    }
  }

  const handleFileUpload = async (file: File) => {
    if (!user) {
      console.error('‚ùå User not available for file upload')
      return
    }

    // ÏÑ∏ÏÖòÏù¥ ÏóÜÏúºÎ©¥ ÏÉàÎ°ú ÏÉùÏÑ±
    let sessionId = currentSessionId
    if (!sessionId) {
      try {
        sessionId = await firestoreService.createChatSession(user.uid)
        updateCurrentSessionId(sessionId)
        console.log('‚úÖ New session created for file upload:', sessionId)
      } catch (error) {
        console.error('‚ùå Failed to create session:', error)
        sessionId = `temp_${Date.now()}`
        updateCurrentSessionId(sessionId)
      }
    }

    console.log('üìÅ Starting file upload process...')

    // ÌååÏùº ÏóÖÎ°úÎìú Ï§ë Î©îÏãúÏßÄ Ï∂îÍ∞Ä (Î°úÎî© ÏÉÅÌÉú ÎåÄÏã†)
    const uploadStartMessage: Message = {
      id: Date.now().toString(),
      type: 'assistant',
      content: 'ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÍ≥† Î∂ÑÏÑùÌïòÎäî Ï§ëÏûÖÎãàÎã§...',
      timestamp: new Date()
    }
    setMessages(prev => [...prev, uploadStartMessage])
    
    try {
      console.log('Starting file upload process...')
      
      // 1. Firebase StorageÏóê ÌååÏùº ÏóÖÎ°úÎìú
      const fileMetadata = await firestoreService.uploadFile(user.uid, file, sessionId)
      console.log('File uploaded to Firebase Storage:', fileMetadata.id)
      
      // 2. Î∞±ÏóîÎìú APIÎ°ú ÌååÏùº ÏóÖÎ°úÎìú Î∞è Î∂ÑÏÑù
      const uploadResponse = await apiService.uploadFile(file)
      console.log('File processed by backend:', uploadResponse.file_id)
      
      setUploadedFile({
        file_id: uploadResponse.file_id,
        name: uploadResponse.filename,
        size: uploadResponse.file_size,
        columns: uploadResponse.columns,
        rows: uploadResponse.row_count,
        preview: uploadResponse.preview,
        firebaseFileId: fileMetadata.id // Firebase file metadata ID
      })

      // 3. FirebaseÏóê ÌååÏùº Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ (Ï≤òÎ¶¨ ÏôÑÎ£å, Ïª¨Îüº Ï†ïÎ≥¥ Îì±)
      if (fileMetadata.id) {
        await firestoreService.updateFileMetadata(fileMetadata.id, {
          processed: true,
          columns: uploadResponse.columns,
          rowCount: uploadResponse.row_count
        })
        console.log('File metadata updated in Firestore')
      }

      const uploadMessage: Message = {
        id: uploadStartMessage.id, // Í∞ôÏùÄ ID ÏÇ¨Ïö©ÌïòÏó¨ Î©îÏãúÏßÄ ÍµêÏ≤¥
        type: 'assistant',
        content: `ÌååÏùºÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏóÖÎ°úÎìúÎêòÏóàÏäµÎãàÎã§! (${uploadResponse.row_count.toLocaleString()}Ìñâ, ${uploadResponse.columns.length}Ïª¨Îüº)\n\nÏù¥Ï†ú Îç∞Ïù¥ÌÑ∞Ïóê ÎåÄÌï¥ ÏßàÎ¨∏Ìï¥Î≥¥ÏÑ∏Ïöî.`,
        timestamp: new Date(),
        fileInfo: {
          filename: uploadResponse.filename,
          fileSize: uploadResponse.file_size,
          fileType: uploadResponse.filename.toLowerCase().endsWith('.csv') ? 'csv' : 'excel',
          file_id: uploadResponse.file_id
        },
        tableData: {
          data: uploadResponse.preview,
          columns: uploadResponse.columns,
          filename: uploadResponse.filename
        }
      }

      // ÏóÖÎ°úÎìú ÏãúÏûë Î©îÏãúÏßÄÎ•º ÏôÑÎ£å Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
      setMessages(prev => prev.map(msg =>
        msg.id === uploadStartMessage.id ? uploadMessage : msg
      ))

      // 4. FirestoreÏóê ÏóÖÎ°úÎìú Î©îÏãúÏßÄ Ï†ÄÏû•
      if (sessionId && !sessionId.startsWith('temp_')) {
        await firestoreService.addMessage({
          sessionId: sessionId,
          userId: user.uid,
          type: uploadMessage.type,
          content: uploadMessage.content,
          timestamp: uploadMessage.timestamp as any,
          fileInfo: uploadMessage.fileInfo,
          tableData: uploadMessage.tableData
        })
        console.log('Upload message saved to Firestore')
      }

      console.log('File upload completed successfully')

      // 6. Ï±ÑÌåÖ ÏÑ∏ÏÖòÏóê ÌååÏùº Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
      if (sessionId && !sessionId.startsWith('temp_')) {
        await firestoreService.updateChatSession(sessionId, {
          fileId: fileMetadata.id,
          fileName: file.name,
          fileUrl: fileMetadata.fileUrl
        })
      }
      console.log('Chat session updated with file info')
      
    } catch (error) {
      console.error('Upload error:', error)

      const errorMessage: Message = {
        id: uploadStartMessage.id, // Í∞ôÏùÄ ID ÏÇ¨Ïö©ÌïòÏó¨ Î©îÏãúÏßÄ ÍµêÏ≤¥
        type: 'assistant',
        content: `ÌååÏùº ÏóÖÎ°úÎìú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`,
        timestamp: new Date()
      }

      // ÏóÖÎ°úÎìú ÏãúÏûë Î©îÏãúÏßÄÎ•º ÏóêÎü¨ Î©îÏãúÏßÄÎ°ú ÍµêÏ≤¥
      setMessages(prev => prev.map(msg =>
        msg.id === uploadStartMessage.id ? errorMessage : msg
      ))

      // Ïò§Î•ò Î©îÏãúÏßÄÎèÑ FirestoreÏóê Ï†ÄÏû•
      if (sessionId && !sessionId.startsWith('temp_') && user) {
        try {
          await firestoreService.addMessage({
            sessionId: sessionId,
            userId: user.uid,
            type: errorMessage.type,
            content: errorMessage.content,
            timestamp: errorMessage.timestamp as any
          })
        } catch (firestoreError) {
          console.error('Error saving error message to Firestore:', firestoreError)
        }
      }
    }
  }


  // Í∞úÎ∞ú ÌôòÍ≤ΩÏóêÏÑú ÌÖåÏä§Ìä∏Î•º ÏúÑÌïú ÏûÑÏãú ÏÇ¨Ïö©Ïûê ÏÉùÏÑ±
  if (!user) {
    console.log('‚ö†Ô∏è User is null/undefined - creating temporary user for testing')
    const tempUser = {
      uid: 'test-user-123',
      email: 'test@example.com',
      displayName: 'Test User'
    } as User
    setUser(tempUser)
    return (
      <div className="flex h-screen items-center justify-center">
        <div className="text-gray-500">Î°úÎî© Ï§ë...</div>
      </div>
    )
  }

  return (
    <div className="flex h-screen w-full max-w-none mx-auto overflow-hidden">
      {/* Sidebar */}
      <div
        className={`bg-gray-900 text-white flex flex-col transition-all duration-300 flex-shrink-0 ${
          isSidebarCollapsed ? 'w-16 min-w-16' : 'w-64 min-w-64'
        }`}
      >
        {/* Sidebar Header */}
        <div className={`p-4 ${
          isSidebarCollapsed ? 'flex justify-center' : 'flex items-center justify-between'
        }`}>
          {isSidebarCollapsed ? (
            <button
              onClick={(e) => {
                e.preventDefault()
                e.stopPropagation()
                setIsSidebarCollapsed(prev => {
                  const newValue = !prev
                  if (typeof window !== 'undefined') {
                    localStorage.setItem('sidebarCollapsed', newValue.toString())
                  }
                  return newValue
                })
              }}
              className="p-1 hover:bg-gray-800 rounded transition-colors relative group"
            >
              <Image 
                src="/image/logo.png" 
                alt="AfterWon Logo" 
                width={40} 
                height={40}
                className="object-contain group-hover:opacity-0 transition-opacity duration-200"
              />
              <RiSideBarLine className="w-4 h-4 absolute inset-0 m-auto opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
            </button>
          ) : (
            <>
              <div className="flex items-center space-x-2">
                <Image 
                  src="/image/logo.png" 
                  alt="AfterWon Logo" 
                  width={32} 
                  height={32}
                  className="object-contain"
                />
                <span className="font-bold text-white" style={{fontFamily: 'SpectralLight, serif'}}>Afterwon</span>
              </div>
              <button
                onClick={(e) => {
                  e.preventDefault()
                  e.stopPropagation()
                  setIsSidebarCollapsed(prev => {
                    const newValue = !prev
                    if (typeof window !== 'undefined') {
                      localStorage.setItem('sidebarCollapsed', newValue.toString())
                    }
                    return newValue
                  })
                }}
                className="p-1 hover:bg-gray-800 rounded transition-colors"
              >
                <RiSideBarLine className="w-4 h-4" />
              </button>
            </>
          )}
        </div>

        {/* Menu Items */}
        <div className="p-3 space-y-1">
          {/* New Chat */}
          <button 
            onClick={() => {
              handleNewChat()
              setCurrentPage('chat')
            }}
            className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors ${
              isSidebarCollapsed ? 'justify-center p-2' : 'space-x-3 px-3 py-2 text-left'
            }`}
          >
            <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
            </svg>
            {!isSidebarCollapsed && <span className="text-sm font-medium">{t('nav.newChat')}</span>}
          </button>

          {/* Chat Search */}
          <button 
            onClick={() => {
              setCurrentPage('chatsearch')
              updateCurrentSessionId(null)
            }}
            className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors ${
              isSidebarCollapsed ? 'justify-center p-2' : 'space-x-3 px-3 py-2 text-left'
            } ${currentPage === 'chatsearch' ? 'bg-gray-800' : ''}`}
          >
            <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
            {!isSidebarCollapsed && <span className="text-sm font-medium">{t('nav.chatSearch')}</span>}
          </button>
          
          {/* Projects */}
          <button
            onClick={() => {
              setCurrentPage('projects')
              updateCurrentSessionId(null)
            }}
            className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors ${
              isSidebarCollapsed ? 'justify-center p-2' : 'space-x-3 px-3 py-2 text-left'
            } ${currentPage === 'projects' ? 'bg-gray-800' : ''}`}
          >
            <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
            </svg>
            {!isSidebarCollapsed && <span className="text-sm font-medium">{t('nav.projects')}</span>}
          </button>

          {/* File System */}
          <button 
            onClick={() => {
              setCurrentPage('filesystem')
              updateCurrentSessionId(null)
            }}
            className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors ${
              isSidebarCollapsed ? 'justify-center p-2' : 'space-x-3 px-3 py-2 text-left'
            } ${currentPage === 'filesystem' ? 'bg-gray-800' : ''}`}
          >
            <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
            </svg>
            {!isSidebarCollapsed && <span className="text-sm">{t('nav.fileSystem')}</span>}
          </button>

          {/* App Connector */}
          <button
            onClick={() => {
              setCurrentPage('appconnector')
              updateCurrentSessionId(null)
            }}
            className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors ${
              isSidebarCollapsed ? 'justify-center p-2' : 'space-x-3 px-3 py-2 text-left'
            } ${currentPage === 'appconnector' ? 'bg-gray-800' : ''}`}
            style={{ marginTop: '24px' }}
          >
            <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
            </svg>
            {!isSidebarCollapsed && <span className="text-sm">{t('nav.appConnector')}</span>}
          </button>

          {/* Dashboard */}
          <button
            onClick={() => {
              setCurrentPage('dashboard')
              updateCurrentSessionId(null)
            }}
            className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors ${
              isSidebarCollapsed ? 'justify-center p-2' : 'space-x-3 px-3 py-2 text-left'
            } ${currentPage === 'dashboard' ? 'bg-gray-800' : ''}`}
          >
            <svg className="w-5 h-5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
            {!isSidebarCollapsed && <span className="text-sm">{t('nav.dashboard')}</span>}
          </button>
          
        </div>

        {/* Content Area - Either chat history or spacer */}
        {isSidebarCollapsed ? (
          /* Collapsed state - spacer to push profile to bottom */
          <div className="flex-1"></div>
        ) : (
          <>
            {/* Chat History Section */}
            <div className="px-3 py-2" style={{ marginTop: '24px' }}>
              <h3 className="text-xs font-medium text-gray-400 uppercase tracking-wider mb-2">
                {t('nav.recentItems')}
              </h3>
            </div>

            {/* Chat History List */}
            <div className="flex-1 overflow-y-auto px-3 space-y-1">
              {chatHistory.length === 0 ? (
                <div className="text-sm text-gray-500 text-center py-4">
                  {t('chat.noHistory')}
                </div>
              ) : (
                chatHistory.map((session) => (
                  <div
                    key={session.id}
                    className={`relative group w-full rounded-lg transition-colors ${
                      currentSessionId === session.id ? 'bg-gray-800' : 'hover:bg-gray-800'
                    }`}
                  >
                    <button
                      onClick={(e) => {
                        console.log('üñ±Ô∏è Chat history item clicked:', session.id, session.title)
                        e.preventDefault()
                        e.stopPropagation()
                        handleSessionClick(session.id!)
                      }}
                      className="w-full text-left p-2 pr-8"
                    >
                      <div className="text-sm text-gray-300 truncate">
                        {session.title || 'ÏÉà Ï±ÑÌåÖ'}
                      </div>
                    </button>

                    {/* Three-dot menu button */}
                    <button
                      onClick={(e) => {
                        e.stopPropagation()
                        setOpenMenuId(openMenuId === session.id ? null : session.id!)
                      }}
                      className="absolute right-1 top-1/2 transform -translate-y-1/2 p-1 rounded hover:bg-gray-700 opacity-0 group-hover:opacity-100 transition-opacity"
                    >
                      <svg className="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z" />
                      </svg>
                    </button>

                    {/* Dropdown menu */}
                    {openMenuId === session.id && (
                      <div data-menu-container className="absolute right-0 top-8 mt-1 w-48 bg-gray-800 rounded-md shadow-lg border border-gray-700 z-50">
                        <div className="py-1">
                          <button
                            onClick={() => handleRenameChat(session.id!)}
                            className="flex items-center w-full px-4 py-2 text-sm text-gray-300 hover:bg-gray-700"
                          >
                            <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                            </svg>
                            {t('menu.rename')}
                          </button>
                          <button
                            onClick={() => handleShareChat(session.id!)}
                            className="flex items-center w-full px-4 py-2 text-sm text-gray-300 hover:bg-gray-700"
                          >
                            <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                            </svg>
                            {t('menu.share')}
                          </button>
                          <div className="border-t border-gray-700 my-1"></div>
                          <button
                            onClick={() => handleDeleteChatClick(session.id!, session.title)}
                            className="flex items-center w-full px-4 py-2 text-sm text-red-400 hover:bg-gray-700"
                          >
                            <svg className="w-4 h-4 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                            {t('menu.delete')}
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          </>
        )}

        {/* User Section - Always visible at bottom */}
        <div className="p-3 relative" data-profile-menu>
          {isSidebarCollapsed ? (
            /* Collapsed state - profile image centered like other menu items */
            <button
              onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
              className={`w-full flex items-center rounded-lg hover:bg-gray-800 transition-colors justify-center p-2`}
            >
              <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center flex-shrink-0">
                <span className="text-sm font-medium">
                  {mounted ? (cachedUserInfo?.initial || getUserInitial(user)) : '?'}
                </span>
              </div>
            </button>
          ) : (
            /* Expanded state - full profile info */
            <button
              onClick={() => setIsProfileMenuOpen(!isProfileMenuOpen)}
              className="w-full flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-800 transition-colors"
            >
              <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center">
                <span className="text-sm font-medium">
                  {mounted ? (cachedUserInfo?.initial || getUserInitial(user)) : '?'}
                </span>
              </div>
              <div className="flex-1 text-left">
                <div className="text-sm font-medium truncate">
                  {cachedUserInfo?.displayName || getUserDisplayName(user)}
                </div>
                <div className="text-xs text-gray-400 truncate">
                  {t('profile.pro')}
                </div>
              </div>
              <svg
                className={`w-4 h-4 text-gray-400 transition-transform ${isProfileMenuOpen ? 'rotate-180' : ''}`}
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
              </svg>
            </button>
          )}

          {/* Profile Dropdown Menu - Only show when expanded sidebar */}
          {isProfileMenuOpen && !isSidebarCollapsed && (
            <div className="absolute bottom-full left-3 right-3 mb-2 bg-gray-800 rounded-lg border border-gray-600 shadow-xl z-50">
              {/* User Email Header */}
              <div className="px-4 py-3 border-b border-gray-600">
                <div className="text-sm text-gray-300 truncate">
                  {cachedUserInfo?.email || user?.email}
                </div>
              </div>

              {/* User Info with Check */}
              <div className="px-4 py-3 border-b border-gray-600">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center">
                      <span className="text-sm font-medium">
                        {mounted ? (cachedUserInfo?.initial || getUserInitial(user)) : '?'}
                      </span>
                    </div>
                    <div>
                      <div className="text-sm font-medium text-white">
                        {cachedUserInfo?.displayName || getUserDisplayName(user)}
                      </div>
                      <div className="text-xs text-gray-400">
                        {t('profile.pro')}
                      </div>
                    </div>
                  </div>
                  <svg className="w-4 h-4 text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
              </div>

              {/* Menu Items */}
              <div className="py-2">
                <button
                  onClick={() => {
                    setCurrentPage('settings')
                    setIsProfileMenuOpen(false)
                    updateCurrentSessionId(null)
                  }}
                  className="w-full px-4 py-2 text-left text-sm text-gray-300 hover:bg-gray-700 transition-colors"
                >
                  {t('common.settings')}
                </button>
                <button className="w-full px-4 py-2 text-left text-sm text-gray-300 hover:bg-gray-700 transition-colors">
                  {t('profile.help')}
                </button>
              </div>

              <div className="border-t border-gray-600 py-2">
                <button className="w-full px-4 py-2 text-left text-sm text-gray-300 hover:bg-gray-700 transition-colors">
                  {t('profile.upgrade')}
                </button>
                <button className="w-full px-4 py-2 text-left text-sm text-gray-300 hover:bg-gray-700 transition-colors flex items-center justify-between">
                  <span>{t('profile.learnMore')}</span>
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </div>

              <div className="border-t border-gray-600 py-2">
                <button
                  onClick={handleLogout}
                  className="w-full px-4 py-2 text-left text-sm text-gray-300 hover:bg-gray-700 transition-colors"
                >
                  {t('auth.logout')}
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* Main Content Container - Î∂ÑÌï† Î†àÏù¥ÏïÑÏõÉ ÎòêÎäî ÏùºÎ∞ò Î†àÏù¥ÏïÑÏõÉ */}
      {expandedChart ? (
        // Ï∞®Ìä∏ ÌôïÎåÄ Î™®Îìú: Î∂ÑÌï† Î†àÏù¥ÏïÑÏõÉ
        <div className="flex flex-1 h-screen overflow-hidden min-w-0">
          {/* Ï¢åÏ∏° Ï±ÑÌåÖ Ìå®ÎÑê */}
          <div
            className="flex flex-col bg-slate-800 overflow-hidden min-w-0"
            style={{ width: `${100 - panelWidth}%` }}
          >
            <ChatHeader uploadedFile={uploadedFile} />

            <div className="flex-1 overflow-hidden flex flex-col min-h-0 relative">
              <div className="flex-1 overflow-y-auto chat-messages-container">
                <ChatMessages
                  messages={messages}
                  isLoading={isLoading}
                  messagesEndRef={messagesEndRef}
                  onFollowUpClick={handleFollowUpClick}
                  onChartExpand={handleChartExpand}
                  uploadedFile={uploadedFile}
                  user={user}
                  onMessageUpdate={handleMessageUpdate}
                />
              </div>

            </div>

            <div className="p-4 bg-slate-800 flex-shrink-0 relative z-10">
              <div className="max-w-4xl mx-auto">
                <ChatInput
                  key={inputKey}
                  onSendMessage={handleSendMessage}
                  onFileUpload={handleFileUpload}
                  isLoading={isLoading}
                  disabled={!user}
                  hasFile={!!uploadedFile}
                  placeholder={!uploadedFile ? t('chat.typeMessage') : t('chat.askQuestion')}
                />
              </div>
            </div>
          </div>

          {/* Î¶¨ÏÇ¨Ïù¥Ï†Ä */}
          <div
            ref={resizerRef}
            className="w-1 bg-blue-500 hover:bg-blue-600 cursor-col-resize flex-shrink-0 relative group"
          >
            <div className="absolute inset-y-0 -inset-x-1 group-hover:bg-blue-500 transition-colors opacity-20"></div>
          </div>

          {/* Ïö∞Ï∏° Ï∞®Ìä∏ Ìå®ÎÑê */}
          <div
            className="bg-white border-l border-gray-300 flex flex-col min-w-0"
            style={{ width: `${panelWidth}%` }}
          >
            {/* Ï∞®Ìä∏ Ìó§Îçî */}
            <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-gray-50">
              <h2 className="text-lg font-semibold text-gray-800">{expandedChart.title}</h2>
              <button
                onClick={handleChartClose}
                className="p-1 hover:bg-gray-200 rounded transition-colors"
                title="Ï∞®Ìä∏ Îã´Í∏∞"
              >
                <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            {/* ÌôïÎåÄÎêú Ï∞®Ìä∏ */}
            <div className="flex-1 p-4">
              <div className="h-full">
                <PlotlyChart
                  data={expandedChart.chartData}
                  height={typeof window !== 'undefined' ? window.innerHeight - 120 : 600}
                  onTitleChange={() => {}}
                  showTitleEditor={false}
                  showControls={false}
                />
              </div>
            </div>
          </div>
        </div>
      ) : (
        // ÏùºÎ∞ò Î™®Îìú: Í∏∞Ï°¥ Î†àÏù¥ÏïÑÏõÉ
        <div className="flex flex-col bg-slate-800 flex-1 h-screen min-w-0 overflow-hidden">
          {currentPage === 'chat' ? (
            <>
              <ChatHeader uploadedFile={uploadedFile} />

              <div className="flex-1 overflow-hidden flex flex-col min-h-0 relative">
                <div className="flex-1 overflow-y-auto">
                  <ChatMessages
                    messages={messages}
                    isLoading={isLoading}
                    messagesEndRef={messagesEndRef}
                    onFollowUpClick={handleFollowUpClick}
                    onChartExpand={handleChartExpand}
                    uploadedFile={uploadedFile}
                    user={user}
                    onMessageUpdate={handleMessageUpdate}
                  />
                </div>

              </div>

              <div className="p-4 bg-slate-800 flex-shrink-0 relative z-10">
                <div className="max-w-4xl mx-auto">
                  <ChatInput
                    key={inputKey}
                    onSendMessage={handleSendMessage}
                    onFileUpload={handleFileUpload}
                    isLoading={isLoading}
                    disabled={!user}
                    hasFile={!!uploadedFile}
                    placeholder={!uploadedFile ? t('chat.typeMessage') : t('chat.askQuestion')}
                  />
                </div>
              </div>
            </>
          ) : currentPage === 'filesystem' ? (
            <FileSystem user={user} />
          ) : currentPage === 'projects' ? (
            <Projects
              user={user}
              onStartChat={(message) => {
                // ÌîÑÎ°úÏ†ùÌä∏ÏóêÏÑú ÏãúÏûëÎêú Ï±ÑÌåÖÏù∏ÏßÄ ÌôïÏù∏
                const savedProjectId = typeof window !== 'undefined' ? localStorage.getItem('currentProjectId') : null
                const savedSessionId = typeof window !== 'undefined' ? localStorage.getItem('currentSessionId') : null
                const isProjectChatSaved = typeof window !== 'undefined' ? localStorage.getItem('isProjectChat') === 'true' : false

                if (savedProjectId && savedSessionId && isProjectChatSaved) {
                  // ÌîÑÎ°úÏ†ùÌä∏ Ïª®ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï
                  updateProjectContext(savedProjectId, true)
                  updateCurrentSessionId(savedSessionId)

                  // ÌîÑÎ°úÏ†ùÌä∏ Ï±ÑÌåÖ ÌûàÏä§ÌÜ†Î¶¨ Îã§Ïãú Î°úÎìú
                  if (user) {
                    loadChatHistory(user)
                  }
                }

                setCurrentPage('chat')

                // Î©îÏãúÏßÄÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå Ï†ÑÏÜ°
                if (message && message.trim()) {
                  handleSendMessage(message)
                }
              }}
              onFileUpload={handleFileUpload}
              isLoading={isLoading}
              hasFile={!!uploadedFile}
            />
          ) : currentPage === 'chatsearch' ? (
            <ChatSearch
              user={user}
            chatHistory={chatHistory}
            onSessionClick={(sessionId) => {
              handleSessionClick(sessionId)
              setCurrentPage('chat')
            }}
            onNewChat={() => {
              handleNewChat()
              setCurrentPage('chat')
            }}
          />
          ) : currentPage === 'appconnector' ? (
            <AppConnector user={user} />
          ) : currentPage === 'dashboard' ? (
            <div className="flex flex-col h-full bg-slate-800 text-white">
              <div className="max-w-6xl mx-auto w-full p-6">
                <h1 className="text-2xl font-bold mb-2">{t('dashboard.title')}</h1>
                <p className="text-gray-400 text-sm mb-6">
                  {t('dashboard.description')}
                </p>

                {/* ÏûÑÏãú placeholder content */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-center mb-4">
                      <svg className="w-8 h-8 text-blue-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                      </svg>
                      <h3 className="text-lg font-semibold">{t('dashboard.chartAnalysis')}</h3>
                    </div>
                    <p className="text-gray-400 text-sm">{t('dashboard.chartAnalysisDesc')}</p>
                  </div>

                  <div className="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-center mb-4">
                      <svg className="w-8 h-8 text-green-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                      </svg>
                      <h3 className="text-lg font-semibold">{t('dashboard.dataStatistics')}</h3>
                    </div>
                    <p className="text-gray-400 text-sm">{t('dashboard.dataStatisticsDesc')}</p>
                  </div>

                  <div className="bg-gray-900 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-center mb-4">
                      <svg className="w-8 h-8 text-purple-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <h3 className="text-lg font-semibold">{t('dashboard.usageStats')}</h3>
                    </div>
                    <p className="text-gray-400 text-sm">{t('dashboard.usageStatsDesc')}</p>
                  </div>
                </div>

                <div className="mt-8 text-center">
                  <p className="text-gray-500">{t('dashboard.underDevelopment')}</p>
                </div>
              </div>
            </div>
          ) : currentPage === 'settings' ? (
            <Settings user={user} />
          ) : null}
        </div>
      )}

      {/* ÏÇ≠Ï†ú ÌôïÏù∏ Î™®Îã¨ */}
      {deleteConfirmModal.isOpen && (
        <div
          className="fixed inset-0 flex items-center justify-center z-50"
          onClick={handleDeleteChatCancel}
        >
          <div
            className="bg-white rounded-lg p-6 max-w-md w-full mx-4"
            onClick={(e) => e.stopPropagation()}
          >
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Ï±ÑÌåÖÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
            </h3>
            <p className="text-gray-600 mb-2">
              Ïù¥ ÌñâÎèôÏúºÎ°ú <strong>{deleteConfirmModal.sessionTitle || 'Ï±ÑÌåÖ'}Ïù¥(Í∞Ä)</strong> ÏÇ≠Ï†úÎê©ÎãàÎã§.
            </p>
            <p className="text-gray-500 text-sm mb-6">
              Ïù¥ Ï±ÑÌåÖÏóê Ï†ÄÏû•Îêú Î©îÎ™®Î¶¨Î•º ÏÇ≠Ï†úÌïòÎ†§Î©¥ <strong>ÏÑ§Ï†ïÏúºÎ°ú Í∞ÄÏÑ∏Ïöî.</strong>
            </p>
            <div className="flex justify-end space-x-3">
              <button
                onClick={handleDeleteChatCancel}
                className="px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleDeleteChatConfirm}
                className="px-4 py-2 text-white bg-red-600 rounded-lg hover:bg-red-700 transition-colors"
              >
                ÏÇ≠Ï†ú
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}